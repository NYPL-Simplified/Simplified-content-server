#!/usr/bin/env python
"""Create Collections for each license-offering DataSource on the
Content Server.
"""
import os
import sys
import json
import logging
from nose.tools import set_trace

bin_dir = os.path.split(__file__)[0]
package_dir = os.path.join(bin_dir, "..")
sys.path.append(os.path.abspath(package_dir))

from core.model import (
    Collection,
    DataSource,
    ExternalIntegration,
    Library,
    get_one_or_create,
    production_session,
)
from core.util import LanguageCodes

from scripts import (
    DirectoryImportScript,
    OPDSImportScript,
)
from feedbooks import FeedbooksOPDSImporter
from unglueit import UnglueItImporter

_db = production_session()

try:
    # Create Collections generated by directory import.
    directory_import = DirectoryImportScript(_db=_db)
    for data_source_name in [DataSource.PLYMPTON, DataSource.ELIB]:
        directory_import.create_collection(data_source_name)

    # Create Collections generated by OPDS import with importer classes.
    opds_importers = {
        FeedbooksOPDSImporter : DataSource.FEEDBOOKS,
        UnglueItImporter : DataSource.UNGLUE_IT,
    }
    for importer_class, data_source_name in opds_importers.items():
        OPDSImportScript(importer_class, data_source_name, _db=_db)

    # Create a StandardEbooks Collection.
    OPDSImportScript(object(), DataSource.STANDARD_EBOOKS, _db=_db,
        collection_data=[(u'https://standardebooks.org/opds/all', None)])

    # Create a Gutenberg Collection.
    gutenberg, is_new = Collection.by_name_and_protocol(
        _db, DataSource.GUTENBERG, ExternalIntegration.GUTENBERG
    )
    if not gutenberg.data_source:
        gutenberg.external_integration.set_setting(
            Collection.DATA_SOURCE_NAME_SETTING, DataSource.GUTENBERG
        )
    if is_new:
        library, ignore = get_one_or_create(_db, Library,
            create_method_kwargs=dict(name=u'Content Server'))
        gutenberg.libraries.append(library)
        logging.info('CREATED Collection for %s: %r' % (
            DataSource.GUTENBERG, gutenberg))

    _db.commit()
except Exception as e:
    _db.close()
